#include "landscape.h"
#include "array.h"
#include "randpois.h"

int exploiters(double ***SCAPE,int Ea,int **E, int **P,int epsiE,int deltaE,int X,int flower){
	int i, j, k, n, c, m, rx[2], ry[2], disp, z, q;
	for(i=0; i<Ea; i++){
		disp = randpois(epsiE);
		j = 0;
		while(j < disp){
			rx[0] = E[i][0] - deltaE; 
			rx[1] = E[i][0] + deltaE; 
			ry[0] = E[i][1] - deltaE; 
			ry[1] = E[i][1] + deltaE; 
			n = floor((rx[1]-rx[0]+1)*randunif()) - deltaE;
			m = floor((ry[1]-ry[0]+1)*randunif()) - deltaE;		
			z = E[i][0] + n;
			q = E[i][1] + m;
			if(z < 0){
				z = X - abs(n) + z;	
			}
			if(z >= X){
				z = n - (z - X);	
			}
			if(q < 0){
				q = X - abs(m) + q;
			}
			if(q >= X){
				q = m - (q - X);	
			}
			E[i][0] = z;
			E[i][1] = q;
			c = SCAPE[z][q][1]; 
			if(c > 0){
				for(k=0; k<flower; k++){
					if(P[c][k+2] == 2){
						P[c][k+2] = 4;
						SCAPE[z][q][2]++;
						SCAPE[z][q][1]--;
					} /*	
					if(P[c][k+2] == 3){
						P[c][k+2] = 4;
						SCAPE[z][q][2]++;
						SCAPE[z][q][0]--;
					} */	
				}	
                /* break; */
			}
			j++;
		}
		if(randunif() > 0.2){
			z = E[i][0];
			q = E[i][1]; 
			SCAPE[z][q][2]++;	
		}	/* This if loop allows exploiters to survive multiple generations */
	}
	return EXIT_SUCCESS;
}
